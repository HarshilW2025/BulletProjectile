buildscript {
  repositories {
    gradlePluginPortal()
  }
  dependencies {
    classpath "io.github.fourlastor:construo:1.7.1"
    if (enableGraalNative == 'true') {
      classpath "org.graalvm.buildtools.native:org.graalvm.buildtools.native.gradle.plugin:0.9.28"
    }
  }
}

plugins {
  id "application"
}
apply plugin: 'io.github.fourlastor.construo'

import io.github.fourlastor.construo.Target

// Add assets folder to resources
sourceSets.main.resources.srcDirs += [rootProject.file('assets').path]

// Set main class using modern syntax
application {
  mainClass = 'com.mygame.projectiles.lwjgl3.Lwjgl3Launcher'
}

// Eclipse project name
eclipse.project.name = appName + '-lwjgl3'

// Java toolchain for modern Gradle
java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(21)
  }
}

dependencies {
  implementation "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
  implementation "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
  implementation project(':core')

  if (enableGraalNative == 'true') {
    implementation "io.github.berstanio:gdx-svmhelper-backend-lwjgl3:$graalHelperVersion"
  }
}

// OS-specific JVM args
def os = System.properties['os.name'].toLowerCase()

run {
  workingDir = rootProject.file('assets').path
  if (os.contains('mac')) jvmArgs += "-XstartOnFirstThread"
}

// JAR task
jar {
  archiveFileName.set("${appName}-${projectVersion}.jar")
  duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
  dependsOn configurations.runtimeClasspath
  from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
  exclude('META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA')
  dependencies {
    exclude('META-INF/INDEX.LIST', 'META-INF/maven/**')
  }
  manifest {
    attributes 'Main-Class': application.mainClass.get()
  }
  doLast {
    file(archiveFile).setExecutable(true, false)
  }
}

// Platform-specific JAR tasks
tasks.register("jarMac") {
  dependsOn("jar")
  group("build")
  jar.archiveFileName.set("${appName}-${projectVersion}-mac.jar")
  jar.exclude("windows/**", "linux/**", "**/*.dll", "**/*.so")
}
tasks.register("jarLinux") {
  dependsOn("jar")
  group("build")
  jar.archiveFileName.set("${appName}-${projectVersion}-linux.jar")
  jar.exclude("windows/**", "macos/**", "**/*.dll", "**/*.dylib")
}
tasks.register("jarWin") {
  dependsOn("jar")
  group("build")
  jar.archiveFileName.set("${appName}-${projectVersion}-win.jar")
  jar.exclude("macos/**", "linux/**", "**/*.dylib", "**/*.so")
}

// Construo native builds
construo {
  name.set(appName)
  humanName.set(appName)
  version.set("$projectVersion")

  targets.configure {
    register("linuxX64", Target.Linux) {
      architecture.set(Target.Architecture.X86_64)
      jdkUrl.set("https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.15%2B6/OpenJDK17U-jdk_x64_linux_hotspot_17.0.15_6.tar.gz")
    }
    register("macM1", Target.MacOs) {
      architecture.set(Target.Architecture.AARCH64)
      jdkUrl.set("https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.15%2B6/OpenJDK17U-jdk_aarch64_mac_hotspot_17.0.15_6.tar.gz")
      identifier.set("com.mygame.projectiles.$appName")
      macIcon.set(project.file("icons/logo.icns"))
    }
    register("macX64", Target.MacOs) {
      architecture.set(Target.Architecture.X86_64)
      jdkUrl.set("https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.15%2B6/OpenJDK17U-jdk_x64_mac_hotspot_17.0.15_6.tar.gz")
      identifier.set("com.mygame.projectiles.$appName")
      macIcon.set(project.file("icons/logo.icns"))
    }
    register("winX64", Target.Windows) {
      architecture.set(Target.Architecture.X86_64)
      icon.set(project.file("icons/logo.png"))
      jdkUrl.set("https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.15%2B6/OpenJDK17U-jdk_x64_windows_hotspot_17.0.15_6.zip")
    }
  }
}

// Distribution task
tasks.register('dist') {
  dependsOn 'jar'
}

// Distributions content setup
distributions {
  main {
    contents {
      into('libs') {
        project.configurations.runtimeClasspath.files.findAll { file ->
          file.getName() != project.tasks.jar.outputs.files.singleFile.name
        }.each { file ->
          exclude file.name
        }
      }
    }
  }
}

// Start scripts classpath
startScripts.dependsOn(':lwjgl3:jar')
startScripts.classpath = project.tasks.jar.outputs.files

// Apply Graal native image if enabled
if (enableGraalNative == 'true') {
  apply from: file("nativeimage.gradle")
}
